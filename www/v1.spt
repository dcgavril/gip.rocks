import warnings
from cStringIO import StringIO
from zipfile import ZipFile, ZIP_DEFLATED

from aspen import Response
from PIL import Image

warnings.simplefilter('error', Image.DecompressionBombWarning)


MAX_SIZE = 256 * 1024


class CappedStringIO(object):
    def __init__(self, fp, target):
        self.io = StringIO(fp)
        self.seek(0)
        self.__nread = 0
        self.__target = target

    def read(self, *a, **kw):
        out = self.io.read(*a, **kw)
        self.__nread += len(out)
        if self.__nread > self.__target:
            raise Response(400)
        return out

    def reset_nread(self):
        self.__nread = 0

    def check_nread(self):
        if self.__nread != self.__target:
            raise Response(400)

    def seek(self, *a, **kw): self.io.seek(*a, **kw)
    def tell(self, *a, **kw): self.io.tell(*a, **kw)

[---]
request.allow('POST')

length = request.headers['Content-Length']
try:
    length = int(length)
except ValueError:
    raise Response(400)
if length > 256 * 1024:
    raise Response(413)

image_type = request.headers['Content-Type']
if image_type not in ('image/png', 'image/jpeg'):
    raise Response(415)

# Load the image.
fp = CappedStringIO(request.raw_body, length)
try:
    image = Image.open(fp)
    fp.reset_nread()    # open reads *some* data
    image.load()        # load reads *all* data ...
except IOError:         # ... and both can raise IOError for parse errors
    raise Response(400)
fp.check_nread()        # still need this tho

# Crop to a square.
w, h = image.size
if w > h:
    left = (w - h) // 2
    right = left + h
    image = image.crop((left, 0, right , h))
elif h > w:
    upper = (h - w) // 2
    lower = upper + w
    image = image.crop((0, upper, w, lower))

# Produce resized versions.
resize = lambda s: image.resize((s, s), resample=Image.ANTIALIAS)
im160 = image if w == 160 else resize(160)
im48 = image if w == 48 else resize(48)

# Output.
zfp = StringIO()
with ZipFile(zfp, mode='w', compression=ZIP_DEFLATED) as zf:
    fmt = image_type.split('/')[1]

    fp = StringIO()
    im160.save(fp, format=fmt)
    zf.writestr('160', fp.getvalue())

    fp = StringIO()
    im48.save(fp, format=fmt)
    zf.writestr('48', fp.getvalue())

zfp.seek(0)
response.headers['Content-Type'] = 'application/zip'
[---] application/zip via eval
zfp.getvalue()
